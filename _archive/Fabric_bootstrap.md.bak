# edgesec-SDN

![Spine-Leaf Fabric Architecture](blob/images/fabric_architecture.png)

---

## What does this show?

This documentation demonstrates how to use Ansible roles to automate the deployment of a scalable, secure, and automated **spine-leaf network fabric** across multiple Proxmox nodes and locations.  
It highlights a hyper-converged infrastructure approach, supporting zero trust and microsegmentation initiatives, and shows how each modular role contributes to building a robust, multi-site network fabric.

---

## Overview

The Fabric Bootstrap system is implemented as a set of Ansible roles, each responsible for a key aspect of the network fabric:

- **`underlay`**  
  Automates the configuration of the L3 underlay network, including routed interfaces and basic connectivity.

- **`bgp`**  
  Deploys and configures BGP routing for dynamic, scalable fabric control.

- **`vxlan`**  
  Automates VXLAN overlay setup for scalable L2 extension and tenant segmentation.

- **`ipam`**  
  Integrates with IP address management systems to automate address allocation and tracking.

- **`vm_nic`**  
  Manages VM network interface configuration for seamless integration with the fabric.

Each role is designed for composability, enabling you to build a robust, multi-site, microsegmented network fabric with minimal manual intervention.

---

## Features

- **Spine-Leaf Architecture:**  
  Automates deployment of a scalable, multi-site spine-leaf topology across Proxmox clusters.

- **Zero Trust & Microsegmentation:**  
  Supports advanced segmentation and security policies at the network fabric level.

- **Multi-Site Support:**  
  Enables consistent network provisioning across geographically distributed Proxmox nodes.

- **Automated Underlay & Overlay:**  
  Handles both routed underlay and VXLAN overlays for flexible, scalable networking.

- **Integrated IPAM:**  
  Automates IP address assignment and management.  
  _For Proxmox Web GUI configuration, see [configure_IPAM_in_Proxmox.md](configure_IPAM_in_Proxmox.md)._

- **Test Automation:**  
  Includes Molecule scenarios for role testing and validation.

---

## Directory Structure

- `roles/underlay/` â€” Underlay network automation
- `roles/bgp/` â€” BGP routing automation
- `roles/vxlan/` â€” VXLAN overlay automation
- `roles/ipam/` â€” IPAM integration
- `roles/vm_nic/` â€” VM NIC management
- `config.yml` â€” Central configuration for all roles
- `inventory` â€” Ansible inventory for your Proxmox environment
- `provision_network.yml` â€” Example playbook for fabric provisioning

---

## Usage

1. **Configure your inventory and `config.yml`** with your Proxmox nodes, fabric topology, and role variables.

2. **Run the network provisioning playbook:**
   ```bash
   ansible-playbook -i inventory provision_network.yml
   ```

3. **Test and validate roles using Molecule:**
   ```bash
   cd roles/underlay
   molecule test
   ```

4. **For IPAM GUI integration:**  
   See [configure_IPAM_in_Proxmox.md](configure_IPAM_in_Proxmox.md) for step-by-step instructions on integrating IPAM with the Proxmox web interface.

---

## ðŸš€ Quickstart

1. **Clone this repository and install Ansible on your control node.**

2. **Edit your inventory file (`inventory.yml`):**
   - Define all Proxmox nodes, their IPs, and groupings.
   - Example:
     ```yaml
     all:
       children:
         proxmox:
           hosts:
             pve-node1:
               ansible_host: 192.168.10.11
             pve-node2:
               ansible_host: 192.168.10.12
             pve-node3:
               ansible_host: 192.168.10.13
         site1:
           hosts:
             pve-node1:
             pve-node2:
         site2:
           hosts:
             pve-node3:
     ```

3. **Customize variables in `group_vars/all.yml`:**
   - Set your underlay interface, VLANs, overlays, gateways, and proxy/NAT IPs.

4. **Create or update `host_vars/<hostname>.yml` for each host:**
   - Set `peer_active: false` for all hosts initially.
   - Example:
     ```yaml
     peer_active: false
     ```

5. **Bootstrap each site independently:**
   ```bash
   ansible-playbook -i inventory.yml site1_bootstrap.yml
   ansible-playbook -i inventory.yml site2_bootstrap.yml
   # Repeat for additional sites as needed
   ```
   > **Tip:** For each new site, copy `site1_bootstrap.yml` and change the `hosts:` line to match your site group.

6. **Run the preflight connectivity check:**
   ```bash
   ansible-playbook -i inventory.yml preflight_connectivity.yml
   ```
   - This ensures all Proxmox hosts can reach each other before enabling BGP peering.

7. **Establish BGP peering interactively:**
   ```bash
   ansible-playbook -i inventory.yml establish_fabric.yml
   ```
   - You will be prompted for confirmation before BGP peering is activated.

8. **For IPAM GUI integration:**  
   See [configure_IPAM_in_Proxmox.md](configure_IPAM_in_Proxmox.md) for step-by-step instructions.

---

**Notes:**
- The staged workflow ensures each site is autonomous and fault-tolerant.
- BGP peering is only enabled after all hosts are reachable and you confirm activation.
- All variables and host-specific settings are managed in `group_vars/` and `host_vars/`.

---

![Fabric Activation Workflow](blob/images/fabric_activation_workflow.png)

## VXLAN Overlay Structure

Each tenant is assigned dedicated VXLAN overlays for:
- Management (vmbr0)
- Engineering (vmbr0)
- Support (vmbr0)
- VM connectivity (vmbr1)
- External connectivity (vmbr2)

Example:
  tenant1_management   (vni: 10100, bridge: vmbr0)
  tenant1_engineering  (vni: 10101, bridge: vmbr0)
  tenant1_support      (vni: 10102, bridge: vmbr0)
  tenant1_vm           (vni: 10110, bridge: vmbr1)
  tenant1_external     (vni: 10120, bridge: vmbr2)

Common services (e.g., DNS, monitoring) use universal overlays with reserved VNIs:
  dns_service   (vni: 9000, bridge: vmbr0)
  monitoring    (vni: 9001, bridge: vmbr0)

Legacy overlays (e.g., Ceph) are assigned to the management bridge for isolation:
  ceph_pub      (vni: 10030, bridge: vmbr0)
  ceph_cluster  (vni: 10031, bridge: vmbr0)

---

## Security

- Use Ansible Vault to encrypt sensitive variables such as BGP passwords, SNMP communities, and API tokens:
  ```bash
  ansible-vault encrypt group_vars/all.yml
  ansible-vault encrypt host_vars/pve-node1.yml
  ```
- Never commit secrets or credentials to version control.
- Limit access to inventory and configuration files to trusted users.
- Regularly rotate credentials and audit playbooks for exposure.

## References

- [EdgeSec Platform Architecture](docs/architecture.md)
- [Ansible Vault Documentation](https://docs.ansible.com/ansible/latest/user_guide/vault.html)

