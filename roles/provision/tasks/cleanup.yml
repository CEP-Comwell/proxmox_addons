---
# Cleanup tasks for provision role - detach interfaces and remove bridges

- name: Set target bridge names for cleanup
  set_fact:
    bridges:
      - "{{ mgmt_bridge | default('vmbr99') }}"
      - "{{ vm_bridge | default('vmbr1') }}"
      - "{{ ext_bridge | default('vmbr2') }}"

- name: Gather physical network interfaces (same filter as provisioning)
  shell: |
    ls -1 /sys/class/net | grep -vE '^(lo|vmbr|tap|fw|bonding_masters|veth|br|docker|virbr|wg|tun|bond|bridge)'
  register: interfaces_raw
  changed_when: false

- name: Set interface list for cleanup
  set_fact:
    interfaces: "{{ interfaces_raw.stdout_lines | default([]) }}"

- name: Detach any physical interface from bridges managed by this role
  become: true
  vars:
    iface: "{{ item }}"
  loop: "{{ interfaces }}"
  loop_control:
    label: "{{ iface }}"
  shell: |
    # remove master if it belongs to one of our bridges
    master=$(readlink -f /sys/class/net/{{ iface }}/master 2>/dev/null || true)
    if [ -n "$master" ]; then
      b=$(basename "$master")
      case " {{ bridges | join(' ') }} " in
        *" $b "*) ip link set dev {{ iface }} nomaster || true ;; 
      esac
    fi

- name: Delete bridges created by this role (if they exist)
  become: true
  loop: "{{ bridges }}"
  loop_control:
    label: "{{ item }}"
  shell: |
    if ip link show {{ item }} >/dev/null 2>&1; then
      # bring down and delete bridge
      ip link set dev {{ item }} down || true
      ip link delete {{ item }} type bridge || true
    fi

- name: Show bridge removal result
  shell: ip -br link show type bridge || true
  register: bridges_state
  changed_when: false

- name: Display bridge state after cleanup
  debug:
    var: bridges_state.stdout_lines
---
# Cleanup tasks for provision role
# TODO: Add tasks to remove provisioned resources (bridges, configs)
