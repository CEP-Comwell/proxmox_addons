
# Phase 1: Single Node VXLAN Setup - Create VLAN-aware bridges and SDN zones
# This task file creates SDN bridges, controller, zones, and VNets using pvesh
# Requires interface pinning to be completed first

- name: Check if SDN bridges already exist
  ansible.builtin.command: pvesh get /nodes/localhost/network --output-format json
  register: existing_network
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Parse existing network configuration
  ansible.builtin.set_fact:
    existing_bridges: "{{ existing_network.stdout | from_json | map(attribute='iface') | select('match', 'vmbr.*') | list }}"
  when: existing_network is defined and existing_network.rc == 0

- name: Create or update VLAN-aware SDN bridges
  ansible.builtin.command: >
    {% if item.name in existing_bridges | default([]) %}
    echo "Bridge {{ item.name }} already exists, skipping reconfiguration"
    {% else %}
    pvesh create /nodes/localhost/network
    -type bridge
    -iface {{ item.name }}
    -bridge_ports {{ item.interface }}
    -bridge_vlan_aware 1
    -autostart 1
    {% endif %}
  loop:
    - { name: 'vmbr99', interface: 'eth0' }  # Management bridge
    - { name: 'vmbr1', interface: 'eth1' }   # Tenant bridge
    - { name: 'vmbr2', interface: 'eth2' }   # Gateway bridge
  register: bridge_creation
  changed_when: bridge_creation.rc == 0

- name: Apply bridge configuration changes
  ansible.builtin.command: pvesh set /nodes/localhost/network
  when: bridge_creation.changed
  notify: verify post-reboot

- name: Check existing SDN fabrics
  ansible.builtin.command: pvesh get /cluster/sdn/fabrics/all --output-format json
  register: existing_fabrics
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Check existing SDN controllers
  ansible.builtin.command: pvesh get /cluster/sdn/controllers --output-format json
  register: existing_controllers
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Check existing SDN zones
  ansible.builtin.command: pvesh get /cluster/sdn/zones --output-format json
  register: existing_zones
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Check existing SDN vnets
  ansible.builtin.command: pvesh get /cluster/sdn/vnets --output-format json
  register: existing_vnets
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Parse existing SDN components
  ansible.builtin.set_fact:
    existing_fabric_ids: "{{ (existing_fabrics.stdout | from_json).get('fabrics', []) | map(attribute='id') | list if existing_fabrics.stdout is defined and existing_fabrics.rc == 0 else [] }}"
    existing_controller_ids: "{{ (existing_controllers.stdout | from_json) | map(attribute='controller') | list if existing_controllers.stdout is defined and existing_controllers.rc == 0 else [] }}"
    existing_zone_ids: "{{ (existing_zones.stdout | from_json) | map(attribute='zone') | list if existing_zones.stdout is defined and existing_zones.rc == 0 else [] }}"
    existing_vnet_ids: "{{ (existing_vnets.stdout | from_json) | map(attribute='vnet') | list if existing_vnets.stdout is defined and existing_vnets.rc == 0 else [] }}"
  when: existing_fabrics.stdout is defined or existing_controllers.stdout is defined or existing_zones.stdout is defined or existing_vnets.stdout is defined

- name: Create SDN fabric (if not exists)
  ansible.builtin.command: >
    pvesh create /cluster/sdn/fabrics/fabric
    -id fabric1
    -protocol openfabric
  register: fabric_creation
  changed_when: fabric_creation.rc == 0
  failed_when: false
  when: "'fabric1' not in existing_fabric_ids | default([])"

- name: Create SDN EVPN controller (if not exists)
  ansible.builtin.command: >
    pvesh create /cluster/sdn/controllers
    -controller controller1
    -type evpn
    -asn 65000
    -fabric fabric1
  register: controller_creation
  changed_when: controller_creation.rc == 0
  failed_when: false
  when: "'controller1' not in existing_controller_ids | default([])"
  notify:
    - verify post-reboot
    - verify vxlan connectivity

- name: Create SDN zones (if not exist)
  ansible.builtin.command: >
    pvesh create /cluster/sdn/zones
    -zone {{ item.zone }}
    -type evpn
    -controller controller1
    -vrf-vxlan {{ item.vrf_vxlan }}
    -advertise-subnets 1
    -mtu 1450
  loop:
    - { zone: 'zone1', vrf_vxlan: 100 }
    - { zone: 'zone2', vrf_vxlan: 200 }
  register: zone_creation
  changed_when: zone_creation.rc == 0
  failed_when: false
  when: "item.zone not in existing_zone_ids | default([])"
  notify:
    - verify post-reboot
    - verify vxlan connectivity

- name: Create SDN VNets (if not exist)
  ansible.builtin.command: >
    pvesh create /cluster/sdn/vnets
    -vnet {{ item.vnet }}
    -zone {{ item.zone }}
    -tag {{ item.tag }}
  loop:
    - { vnet: 'vnet1', zone: 'zone1', tag: 10 }
    - { vnet: 'vnet2', zone: 'zone2', tag: 20 }
  register: vnet_creation
  changed_when: vnet_creation.rc == 0
  failed_when: false
  when: "item.vnet not in existing_vnet_ids | default([])"
  notify:
    - verify post-reboot
    - verify vxlan connectivity

- name: Apply SDN configuration changes
  ansible.builtin.command: pvesh set /cluster/sdn
  when: (fabric_creation.changed | default(false)) or (controller_creation.changed | default(false)) or (zone_creation.changed | default(false)) or (vnet_creation.changed | default(false))
  notify:
    - verify post-reboot
    - verify vxlan connectivity

- name: Verify bridge configuration
  ansible.builtin.command: pvesh get /nodes/localhost/network
  register: network_config
  changed_when: false

- name: Verify SDN configuration
  ansible.builtin.command: pvesh get /cluster/sdn
  register: sdn_config
  changed_when: false

- name: Display network configuration
  ansible.builtin.debug:
    msg: "{{ network_config.stdout }}"
  when: network_config.stdout is defined

- name: Display SDN configuration
  ansible.builtin.debug:
    msg: "{{ sdn_config.stdout }}"
  when: sdn_config.stdout is defined
